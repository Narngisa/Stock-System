import os
import json
import datetime
from tkinter import *
from tkinter import messagebox
from tkinter import ttk

# ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
def load_json():
    global recipes, stock, dessert

    recipes_path = "./json/recipes.json"
    stock_path = "./json/stock.json"
    dessert_path = "./json/dessert.json"

    try:
        os.makedirs('./json', exist_ok=True)

        if os.path.exists(recipes_path):
            with open(recipes_path, "r", encoding="utf-8") as f:
                recipes = json.load(f)

        if os.path.exists(stock_path):
            with open(stock_path, "r", encoding="utf-8") as f:
                stock = json.load(f)

        if os.path.exists(dessert_path):
            with open(dessert_path, "r", encoding="utf-8") as f:
                dessert = json.load(f)

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

    print("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üì¶")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def add_ingredient(name, amount):
    if name in stock:
        stock[name] += amount
        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    else:
        stock[name] = amount
        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏•‡∏á‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")

# ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def remove_ingredient(name):
    if name in stock:
        amount = stock[name]
        del stock[name]
        print(f"‡∏•‡∏ö {name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    else:
        print(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")

# ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def reduce_ingredient(name, amount):
    if name in stock:
        if stock[name] >= amount:
            stock[name] -= amount
            print(f"‡∏•‡∏î {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏à‡∏≤‡∏Å {stock[name] + amount} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {stock[name]} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
        else:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {name} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
    else:
        print(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")

# ‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô
def make_item(item_name, quantity):
    if item_name not in recipes:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ")
        return

    required = recipes[item_name]
    for ing, amount in required.items():
        total_required = amount * quantity
        if stock.get(ing, 0) < total_required:
            print(f"‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {ing} ‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {total_required} ‡∏°‡∏µ {stock.get(ing, 0)})")
            return

    for ing, amount in required.items():
        stock[ing] -= amount * quantity
    send_item(f"‡∏ú‡∏•‡∏¥‡∏ï {item_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {quantity} ‡∏ä‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", item_name, quantity)

# ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ï‡πá‡∏≠‡∏Å
def summarize_stock():
    liquid_items = ["‡∏ô‡πâ‡∏≥", "‡∏ß‡∏¥‡∏õ‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ô‡∏°‡∏™‡∏î", "‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°‡∏™‡∏î"]
    fruit_items = ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÅ‡∏î‡∏á", "‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà", "‡∏™‡πâ‡∏°"]
    leaf_item = ["‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡πÅ‡∏Å‡πâ‡∏ß"]
    summary = []

    print("üì¶ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á:")
    print("-" * 40)
    for item, amount in stock.items():
        if item in liquid_items:
            print(f"{item} {amount} ml")
            line = f"{item} {amount} ml"
        elif item == "‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà":
            print(f"{item} {amount} ‡∏ü‡∏≠‡∏á")
            line = f"{item} {amount} ‡∏ü‡∏≠‡∏á"
        elif item in fruit_items:
            print(f"{item} {amount} ‡∏•‡∏π‡∏Å")
            line = f"{item} {amount} ‡∏•‡∏π‡∏Å"
        elif item == "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
            print(f"{item} {amount} ‡∏Å‡πâ‡∏≠‡∏ô")
            line = f"{item} {amount} ‡∏Å‡πâ‡∏≠‡∏ô"
        elif item in leaf_item:
            print(f"{item} {amount} ‡πÉ‡∏ö")
            line = f"{item} {amount} ‡πÉ‡∏ö"
        else:
            print(f"{item} {amount} g")
            line = f"{item} {amount} g"
        summary.append(line)
    print("-" * 40)

    with open("./out/output.txt", "w", encoding="utf-8") as f:
        for line in summary:
            f.write(line + "\n")

def add_dessert(name, amount):
    if name in dessert:
        dessert[name] += amount
        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    else:
        dessert[name] = amount
        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")


def reduce_dessert(name, amount):
    if name in dessert:
        if dessert[name] >= amount:
            dessert[name] -= amount
            print(f"‡∏•‡∏î {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏à‡∏≤‡∏Å {dessert[name] + amount} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {dessert[name]} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
        else:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {name} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
    else:
        print(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")

def send_dessert(name, amount):

    all_items = ["Cheesecake", "Brownie", "Apple Pie", "Pancake", "Ice Cream(Vanilla)", "Ice Cream(Chocolate)", "Milk", "Water", "Cocoa Milk", "Orange Juice", "Orange Smoothie", "Apple Juice", "Apple Smoothie", "Lime Juice", "Lime Smoothie", "Strawberry Juice", "Strawberry Smoothie", "Milk", "Water", "Cocoa Milk", "Orange Juice", "Orange Smoothie", "Apple Juice", "Apple Smoothie", "Lime Juice", "Lime Smoothie", "Strawberry Juice", "Strawberry Smoothie", "Chocolate Mousse", "Grass Jelly", "Bingsu(Strawberry)", "Bingsu(Orange)", "Bingsu(Apple)", "Bingsu(Chocolate)", "Shaved Ice(Strawberry)", "Shaved Ice(Orange)", "Shaved Ice(Apple)", "Shaved Ice(Chocolate)", "Panna Cotta(Strawberry)", "Panna Cotta(Orange)", "Panna Cotta(Apple)", "Soy Milk", "Oat Milk", "Green Tea", "Macaron(Chocolate)", "Macaron(Vanilla)", "Sandwich"]

    if name in dessert:
        if name in all_items:
            if name == "Cheesecake" or name == "Apple Pie":
                amount = 8 * amount
            elif name == "Brownie":
                amount = 16 * amount
            elif name == "Pancake" or name == "Milk" or name ==  "Water" or name == "Cocoa Milk" or name == "Orange Juice" or name == "Orange Smoothie" or name == "Apple Juice" or name == "Apple Smoothie" or name == "Lime Juice" or name == "Lime Smoothie" or name == "Strawberry Juice" or name == "Strawberry Smoothie" or name == "Chocolate Mousse" or name == "Green Tea":
                amount = 1 * amount
            elif name == "Ice Cream(Vanilla)" or name == "Ice Cream(Chocolate)":
                amount = 16 * amount
            elif name == "Grass Jelly" or name == "Bingsu(Strawberry)" or name == "Bingsu(Orange)" or name == "Bingsu(Apple)" or name == "Bingsu(Chocolate)" or name == "Shaved Ice(Strawberry)" or name == "Shaved Ice(Orange)" or name == "Shaved Ice(Apple)" or name == "Shaved Ice(Chocolate)" or name == "Panna Cotta(Strawberry)" or name == "Panna Cotta(Orange)" or name == "Panna Cotta(Apple)":
                amount = 4 * amount
            elif name == "Soy Milk" or name == "Oat Milk" or name == "Sandwich":
                amount = 7 * amount
            elif name == "Macaron(Chocolate)" or name == "Macaron(Vanilla)":
                amount = 20 * amount
        dessert[name] += amount

        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    else:
        dessert[name] = amount
        print(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô send_item ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô JSON
def send_item(message, name, amount):

    send_dessert(name, amount)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
    try:
        with open("./json/dessert.json", "w", encoding="utf-8") as f:
            json.dump(dessert, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"

    print(log_message)

def save_stock():
    try:
        with open("./json/stock.json", "w", encoding="utf-8") as f:
            json.dump(stock, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ")

def save_dessert():
    try:
        with open("./json/dessert.json", "w", encoding="utf-8") as f:
            json.dump(dessert, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô‡πÑ‡∏î‡πâ")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å
load_json()

# ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å
root = Tk()
root.title("Felix - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô .png ‡∏´‡∏£‡∏∑‡∏≠ .jpg
icon = PhotoImage(file="./icon/cake.ico")
root.iconphoto(True, icon)

# ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
root.geometry("1000x600")

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß GUI
title = Label(root, text="üì¶ Felix Stock System", font=("TH Sarabun New", 24, "bold"))
title.pack(pady=10)

# ‡πÉ‡∏ä‡πâ Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
notebook = ttk.Notebook(root)
notebook.pack(pady=10, expand=True)

# ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 1 (‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ï‡πá‡∏≠‡∏Å)
frame1 = Frame(notebook)
notebook.add(frame1, text="üì¶ ‡∏™‡∏ï‡πá‡∏≠‡∏Å")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def show_summary():
    summary_window.delete(1.0, END)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    liquid_items = ["‡∏ô‡πâ‡∏≥", "‡∏ß‡∏¥‡∏õ‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ô‡∏°‡∏™‡∏î", "‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°‡∏™‡∏î", "‡∏°‡∏≤‡∏¢‡∏≠‡∏á‡πÄ‡∏ô‡∏™", "‡∏ã‡∏≠‡∏™‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®"]
    fruit_items = ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÅ‡∏î‡∏á", "‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà", "‡∏™‡πâ‡∏°", "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®", "‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤", "‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà"]
    leaf_item = ["‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡πÅ‡∏Å‡πâ‡∏ß"]
    for item, amount in stock.items():
        if item in liquid_items:
            line = f"{item} {amount} ml"
        elif item == "‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà":
            line = f"{item} {amount} ‡∏ü‡∏≠‡∏á"
        elif item in fruit_items:
            line = f"{item} {amount} ‡∏•‡∏π‡∏Å"
        elif item == "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
            line = f"{item} {amount} ‡∏Å‡πâ‡∏≠‡∏ô"
        elif item in leaf_item:
            line = f"{item} {amount} ‡πÉ‡∏ö"
        else:
            line = f"{item} {amount} g"

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
        if amount < 500:
            color = "red"
        elif amount < 2000:
            color = "yellow"
        else:
            color = "green"
        summary_window.insert(END, line + "\n", color)

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Text widget
    summary_window.tag_config("red", foreground="red")
    summary_window.tag_config("yellow", foreground="orange")
    summary_window.tag_config("green", foreground="green")

# ‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
summary_window = Text(frame1, width=60, height=15, font=("TH Sarabun New", 14))
summary_window.pack(pady=0)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ô
frame_buttons = Frame(frame1)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°
frame_buttons.pack(pady=5)

# ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡∏∏‡∏õ
btn_summary = Button(frame_buttons, text="üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", command=lambda: [summarize_stock(), show_summary()])
btn_summary.pack(side=LEFT, padx=5)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ô

# ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
btn_load = Button(frame_buttons, text="üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", command=lambda: [load_json(), show_summary()])
btn_load.pack(side=LEFT, padx=5)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ô

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
frame_system = Frame(frame1)
frame_system.pack(pady=5)

ingredient_list = list(stock.keys())
ingredient_combobox = ttk.Combobox(frame_system, values=ingredient_list, font=("TH Sarabun New", 14), width=25)
ingredient_combobox.grid(row=0, column=0, padx=5)
entry_amount = Entry(frame_system, font=("TH Sarabun New", 14), width=10)
entry_amount.grid(row=0, column=1, padx=5)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def add_to_stock():
    name = ingredient_combobox.get()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
    if name == "":
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")
        return  # ‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö
    
    try:
        amount = float(entry_amount.get())
        add_ingredient(name, amount)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        show_summary()
        save_dessert()
    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

# ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def decrease_ingredient():
    name = ingredient_combobox.get()
    try:
        amount = float(entry_amount.get())
        if amount <= 0:
            raise ValueError("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å")
        reduce_ingredient(name, amount)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏î {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        show_summary()
        save_stock()
    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")

# ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def delete_ingredient():
    name = ingredient_combobox.get()
    if name in stock:
        amount = stock[name]
        remove_ingredient(name)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö {name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
        show_summary()
        save_stock()
    else:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏•‡∏ö, ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
Button(frame_system, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", command=add_to_stock).grid(row=0, column=2, padx=5)
Button(frame_system, text="üóëÔ∏è ‡∏•‡∏ö", command=delete_ingredient).grid(row=0, column=3, padx=5)
Button(frame_system, text="‚ûñ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", command=decrease_ingredient).grid(row=0, column=4, padx=5)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
frame_make_item = Frame(frame1)
frame_make_item.pack(pady=10)

# Combobox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
menu_list = list(recipes.keys())
menu_combobox = ttk.Combobox(frame_make_item, values=menu_list, font=("TH Sarabun New", 14), width=25)
menu_combobox.grid(row=0, column=0, padx=5)

entry_quantity = Entry(frame_make_item, font=("TH Sarabun New", 14), width=10)
entry_quantity.grid(row=0, column=1, padx=5)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°
def make_dessert():
    item_name = menu_combobox.get()
    try:
        quantity = int(entry_quantity.get())
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        if item_name not in recipes:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π {item_name}")
            return

        required = recipes[item_name]
        for ing, amount in required.items():
            total_required = amount * quantity
            if stock.get(ing, 0) < total_required:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö {ing} ‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {total_required} ‡∏°‡∏µ {stock.get(ing, 0)})")
                return
        
        make_item(item_name, quantity)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ú‡∏•‡∏¥‡∏ï {item_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {quantity} ‡∏ä‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")
        show_summary()
        save_stock()
    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

Button(frame_make_item, text="üç∞ ‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°", command=lambda: [make_dessert(), show_refrigerator()]).grid(row=0, column=3, padx=5)

# ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
frame2 = Frame(notebook)
notebook.add(frame2, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")

# ‡∏Å‡∏£‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
frame_bulk_add = Frame(frame2)
frame_bulk_add.pack(pady=10)

# ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
bulk_entries = []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def remove_entry(row_frame, entry_tuple):
    row_frame.destroy()
    if entry_tuple in bulk_entries:
        bulk_entries.remove(entry_tuple)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà
def add_bulk_entry():
    row = Frame(frame_bulk_add)
    row.pack(pady=5)

    ing_combobox = ttk.Combobox(row, values=list(stock.keys()), font=("TH Sarabun New", 14), width=25)
    ing_combobox.pack(side=LEFT, padx=5)

    amount_entry = Entry(row, font=("TH Sarabun New", 14), width=10)
    amount_entry.pack(side=LEFT, padx=5)

    entry_tuple = (ing_combobox, amount_entry)

    btn_delete = Button(row, text="üóëÔ∏è ‡∏•‡∏ö", command=lambda: remove_entry(row, entry_tuple))
    btn_delete.pack(side=LEFT, padx=5)

    bulk_entries.append(entry_tuple)

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
btn_create_input = Button(frame2, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", command=add_bulk_entry)
btn_create_input.pack(padx=10)

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def add_multiple_ingredients():
    success = []
    for combobox, entry in bulk_entries:
        name = combobox.get()
        try:
            amount = float(entry.get())
            if name:
                add_ingredient(name, amount)
                success.append(f"{name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except ValueError:
            continue

    if success:
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:\n" + "\n".join(success))
        show_summary()
        save_stock()
    else:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

btn_add_multiple = Button(frame2, text="‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=add_multiple_ingredients)
btn_add_multiple.pack(padx=10)

frame3 = Frame(notebook)
notebook.add(frame3, text="‚ûï ‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

def show_refrigerator():
    refrigerator_window.delete(1.0, END)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    slice_items = ["Cheesecake", "Brownie", "Apple Pie", "Pancake", "Macaron(Chocolate)", "Macaron(Vanilla)", "Sandwich"]
    scoop_items = ["Ice Cream(Vanilla)", "Ice Cream(Chocolate)"]
    glass_items = ["Water", "Milk", "Soy Milk", "Oat Milk", "Cocoa Milk", "Green Tea", "Orange Juice", "Orange Smoothie", "Apple Juice", "Apple Smoothie", "Lime Juice", "Lime Smoothie", "Strawberry Juice", "Strawberry Smoothie"]
    cup_items = ["Chocolate Mousse", "Grass Jelly", "Bingsu(Strawberry)", "Bingsu(Orange)", "Bingsu(Apple)", "Bingsu(Chocolate)", "Shaved Ice(Strawberry)", "Shaved Ice(Orange)", "Shaved Ice(Apple)", "Shaved Ice(Chocolate)", "Panna Cotta(Strawberry)", "Panna Cotta(Orange)", "Panna Cotta(Apple)"]
    bottle_item = ["Blood"]

    for item, amount in dessert.items():
        if item in slice_items:
            line = f"{item} {amount} ‡∏ä‡∏¥‡πâ‡∏ô"
        elif item in scoop_items:
            line = f"{item} {amount} ‡∏™‡∏Å‡∏π‡πä‡∏õ"
        elif item in glass_items:
            line = f"{item} {amount} ‡πÅ‡∏Å‡πâ‡∏ß"
        elif item in cup_items:
            line = f"{item} {amount} ‡∏ñ‡πâ‡∏ß‡∏¢"
        elif item in bottle_item:
            line = f"{item} {amount} ‡∏Ç‡∏ß‡∏î"
        else:
            line = f"{item} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ !!"
        refrigerator_window.insert(END, line + "\n")

# ‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
refrigerator_window = Text(frame3, width=60, height=15, font=("TH Sarabun New", 14))
refrigerator_window.pack(pady=0)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ô
frame_refrigerator = Frame(frame3)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°
frame_refrigerator.pack(pady=5)

# ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
btn_load_ref = Button(frame_refrigerator, text="üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", command=lambda: [load_json(), show_refrigerator()])
btn_load_ref.pack(side=LEFT, padx=5)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ô

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
frame_ref = Frame(frame3)
frame_ref.pack(pady=5)

ref_list = list(dessert.keys())
ref_combobox = ttk.Combobox(frame_ref, values=ref_list, font=("TH Sarabun New", 14), width=25)
ref_combobox.grid(row=0, column=0, padx=5)
ref_amount = Entry(frame_ref, font=("TH Sarabun New", 14), width=10)
ref_amount.grid(row=0, column=1, padx=5)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def add_to_dessert():
    name = ref_combobox.get()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
    if name == "":
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà {name} ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")
        return  # ‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö
    
    try:
        amount = float(ref_amount.get())
        add_dessert(name, amount)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        show_refrigerator()
        save_dessert()
    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

# ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
def serve_dessert():
    name = ref_combobox.get()
    try:
        amount = float(ref_amount.get())
        if amount <= 0:
            raise ValueError("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å")
        reduce_dessert(name, amount)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏î {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        show_refrigerator()
        save_dessert()
    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏•‡∏ö, ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
Button(frame_ref, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", command=add_to_dessert).grid(row=0, column=2, padx=5)
Button(frame_ref, text="‚ûñ ‡πÄ‡∏™‡∏£‡∏¥‡∏ü", command=serve_dessert).grid(row=0, column=3, padx=5)

# ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
def on_exit():
    load_json()
    save_stock()
    save_dessert()
    root.destroy()

root.protocol("WM_DELETE_WINDOW", on_exit)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
show_summary()
show_refrigerator()
root.mainloop()
